@page "/charactersPaging2"

@inject IStarWarsGeneratedClient Client;

<h1>Characters (with offset based paging)</h1>
@*@if (characters == null)
	{
	<p><em>Loading...</em></p>
	}
	else
	{
	<PagedList ListQuery="characters" TotalCount="total">
	<HeaderDisplay>
	<tr>
	<th>Id</th>
	<th>Name</th>
	<th>Episodes</th>
	</tr>
	</HeaderDisplay>
	<ItemDisplay>
	<tr>
	<td>@context.Id</td>
	<td>@context.Name</td>
	<td>@string.Join(", ", @context.AppearsIn)</td>
	</tr>
	</ItemDisplay>
	</PagedList>
	}*@
@if (characters == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Name</th>
				<th>Episodes</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var character in characters)
			{
				<tr>
					<td>@character.Id</td>
					<td>@character.Name</td>
					<td>@string.Join(", ", @character.AppearsIn)</td>
				</tr>
			}
		</tbody>
	</table>
	<div>Total = @total</div>
	@*<button disabled="@(!pageInfo.HasPreviousPage)" type="button" @onclick="@ClickPrevious">⬅️</button>*@
	for (int pageIndex = 1; pageIndex <= Convert.ToInt32(Math.Ceiling(total / Convert.ToDecimal(pageSize))); pageIndex++)
	{
		var handlePageArgument = pageIndex;
		<button type="button" @onclick="(() => HandleChangePage(handlePageArgument))">@pageIndex</button>
	}
	@*<button disabled="@(!pageInfo.HasNextPage)" type="button" @onclick="@ClickNext">➡️</button>*@
}

@code {
	private int pageSize = 2;

	private IReadOnlyList<IGetCharactersWithPaging_CharactersWithPagingFilteringAndSorting_Items> characters;
	private IGetCharactersWithPaging_CharactersWithPagingFilteringAndSorting_PageInfo pageInfo;
	private int total = 0;

	protected override async Task OnInitializedAsync()
	{
		await Update(pageSize, null);
	}

	async Task ClickNext()
	{
		if (pageInfo.HasNextPage)
		{
			await Update(pageSize, 1);
		}
	}

	async Task ClickPrevious()
	{
		if (pageInfo.HasPreviousPage)
		{
			await Update(null, pageSize);
		}
	}

	async Task HandleChangePage(int p)
	{
		Console.WriteLine(p);
		await Update(pageSize, (p - 1) * pageSize);
	}

	private async Task Update(int? take, int? skip)
	{
		var operationResult = await Client.GetCharactersWithPaging.ExecuteAsync(take, skip);

		var x = operationResult.Data.CharactersWithPagingFilteringAndSorting;
		characters = x.Items;
		pageInfo = x.PageInfo;
		total = x.TotalCount;
	}
}